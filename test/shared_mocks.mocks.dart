// Mocks generated by Mockito 5.1.0 from annotations
// in search_ahead/test/shared_mocks.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:search_ahead/core/api/seatgeek/i_seatgeek_provider.dart' as _i9;
import 'package:search_ahead/core/api/seatgeek/model/event_response.dart'
    as _i3;
import 'package:search_ahead/core/common/utils/localstorage/i_local_storage.dart'
    as _i6;
import 'package:search_ahead/core/model/home/event.dart' as _i4;
import 'package:search_ahead/core/repository/favourite/i_favourite_repository.dart'
    as _i5;
import 'package:search_ahead/core/repository/search/i_search_repository.dart'
    as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class _FakeEventListResponse_1 extends _i1.Fake
    implements _i3.EventListResponse {}

class _FakeVenue_2 extends _i1.Fake implements _i4.Venue {}

/// A class which mocks [IFavouriteRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIFavouriteRepository extends _i1.Mock
    implements _i5.IFavouriteRepository {
  MockIFavouriteRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool checkIfFavourite(String? id) =>
      (super.noSuchMethod(Invocation.method(#checkIfFavourite, [id]),
          returnValue: false) as bool);
  @override
  List<String> getFavouriteIds() =>
      (super.noSuchMethod(Invocation.method(#getFavouriteIds, []),
          returnValue: <String>[]) as List<String>);
  @override
  void addIdToList(String? id) =>
      super.noSuchMethod(Invocation.method(#addIdToList, [id]),
          returnValueForMissingStub: null);
  @override
  void removeIdFromList(String? id) =>
      super.noSuchMethod(Invocation.method(#removeIdFromList, [id]),
          returnValueForMissingStub: null);
}

/// A class which mocks [ILocalStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockILocalStorage extends _i1.Mock implements _i6.ILocalStorage {
  MockILocalStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void clearData() => super.noSuchMethod(Invocation.method(#clearData, []),
      returnValueForMissingStub: null);
  @override
  _i7.Future<bool> initState() =>
      (super.noSuchMethod(Invocation.method(#initState, []),
          returnValue: Future<bool>.value(false)) as _i7.Future<bool>);
  @override
  String getString(String? key, {String? defValue}) => (super.noSuchMethod(
      Invocation.method(#getString, [key], {#defValue: defValue}),
      returnValue: '') as String);
  @override
  bool getBoolean(String? key, {bool? defValue}) => (super.noSuchMethod(
      Invocation.method(#getBoolean, [key], {#defValue: defValue}),
      returnValue: false) as bool);
  @override
  int getInt(String? key, {int? defValue}) => (super.noSuchMethod(
      Invocation.method(#getInt, [key], {#defValue: defValue}),
      returnValue: 0) as int);
  @override
  List<String> getStringList(String? key) =>
      (super.noSuchMethod(Invocation.method(#getStringList, [key]),
          returnValue: <String>[]) as List<String>);
  @override
  void putString(String? key, String? value) =>
      super.noSuchMethod(Invocation.method(#putString, [key, value]),
          returnValueForMissingStub: null);
  @override
  void putBool(String? key, bool? value) =>
      super.noSuchMethod(Invocation.method(#putBool, [key, value]),
          returnValueForMissingStub: null);
  @override
  void putInt(String? key, int? value) =>
      super.noSuchMethod(Invocation.method(#putInt, [key, value]),
          returnValueForMissingStub: null);
  @override
  void putStringList(String? key, List<String>? value) =>
      super.noSuchMethod(Invocation.method(#putStringList, [key, value]),
          returnValueForMissingStub: null);
  @override
  void deleteData(String? key) =>
      super.noSuchMethod(Invocation.method(#deleteData, [key]),
          returnValueForMissingStub: null);
}

/// A class which mocks [ISearchRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockISearchRepository extends _i1.Mock implements _i8.ISearchRepository {
  MockISearchRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<Exception, List<_i4.Event>>> getEventList(
          String? keyword) =>
      (super.noSuchMethod(Invocation.method(#getEventList, [keyword]),
              returnValue: Future<_i2.Either<Exception, List<_i4.Event>>>.value(
                  _FakeEither_0<Exception, List<_i4.Event>>()))
          as _i7.Future<_i2.Either<Exception, List<_i4.Event>>>);
}

/// A class which mocks [ISeatGeekProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockISeatGeekProvider extends _i1.Mock implements _i9.ISeatGeekProvider {
  MockISeatGeekProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i3.EventListResponse> getEventList(String? keyword) =>
      (super.noSuchMethod(Invocation.method(#getEventList, [keyword]),
              returnValue: Future<_i3.EventListResponse>.value(
                  _FakeEventListResponse_1()))
          as _i7.Future<_i3.EventListResponse>);
}

/// A class which mocks [Event].
///
/// See the documentation for Mockito's code generation for more information.
class MockEvent extends _i1.Mock implements _i4.Event {
  MockEvent() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: 0) as int);
  @override
  set id(int? _id) => super.noSuchMethod(Invocation.setter(#id, _id),
      returnValueForMissingStub: null);
  @override
  List<_i4.Performer> get performers =>
      (super.noSuchMethod(Invocation.getter(#performers),
          returnValue: <_i4.Performer>[]) as List<_i4.Performer>);
  @override
  set performers(List<_i4.Performer>? _performers) =>
      super.noSuchMethod(Invocation.setter(#performers, _performers),
          returnValueForMissingStub: null);
  @override
  _i4.Venue get venue => (super.noSuchMethod(Invocation.getter(#venue),
      returnValue: _FakeVenue_2()) as _i4.Venue);
  @override
  set venue(_i4.Venue? _venue) =>
      super.noSuchMethod(Invocation.setter(#venue, _venue),
          returnValueForMissingStub: null);
  @override
  String get shortTitle =>
      (super.noSuchMethod(Invocation.getter(#shortTitle), returnValue: '')
          as String);
  @override
  set shortTitle(String? _shortTitle) =>
      super.noSuchMethod(Invocation.setter(#shortTitle, _shortTitle),
          returnValueForMissingStub: null);
  @override
  set title(String? _title) =>
      super.noSuchMethod(Invocation.setter(#title, _title),
          returnValueForMissingStub: null);
  @override
  String get dateTime =>
      (super.noSuchMethod(Invocation.getter(#dateTime), returnValue: '')
          as String);
  @override
  set dateTime(String? _dateTime) =>
      super.noSuchMethod(Invocation.setter(#dateTime, _dateTime),
          returnValueForMissingStub: null);
  @override
  bool get isFavourite =>
      (super.noSuchMethod(Invocation.getter(#isFavourite), returnValue: false)
          as bool);
  @override
  set isFavourite(bool? _isFavourite) =>
      super.noSuchMethod(Invocation.setter(#isFavourite, _isFavourite),
          returnValueForMissingStub: null);
}

/// A class which mocks [Venue].
///
/// See the documentation for Mockito's code generation for more information.
class MockVenue extends _i1.Mock implements _i4.Venue {
  MockVenue() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get location =>
      (super.noSuchMethod(Invocation.getter(#location), returnValue: '')
          as String);
  @override
  set location(String? _location) =>
      super.noSuchMethod(Invocation.setter(#location, _location),
          returnValueForMissingStub: null);
}

/// A class which mocks [Performer].
///
/// See the documentation for Mockito's code generation for more information.
class MockPerformer extends _i1.Mock implements _i4.Performer {
  MockPerformer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get performerId =>
      (super.noSuchMethod(Invocation.getter(#performerId), returnValue: 0)
          as int);
  @override
  set performerId(int? _performerId) =>
      super.noSuchMethod(Invocation.setter(#performerId, _performerId),
          returnValueForMissingStub: null);
  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  set name(String? _name) => super.noSuchMethod(Invocation.setter(#name, _name),
      returnValueForMissingStub: null);
  @override
  set image(String? _image) =>
      super.noSuchMethod(Invocation.setter(#image, _image),
          returnValueForMissingStub: null);
}
